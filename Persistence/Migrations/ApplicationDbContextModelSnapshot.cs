// <auto-generated />
using System;
using System.Collections.Generic;
using Domain.Contest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Domain.CallbackApiConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("ConfirmationKey")
                        .HasColumnType("text");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("CallbackApiConfigurations");
                });

            modelBuilder.Entity("Domain.Contest.ContestBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<ContestConfigurationBase>("Configuration")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<long>("VkPostId")
                        .HasColumnType("bigint");

                    b.Property<IList<Guid>>("WinnerParticipantIds")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("Contests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ContestBase");
                });

            modelBuilder.Entity("Domain.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualAttemptsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ContestBaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastCommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxAttemptsCount")
                        .HasColumnType("integer");

                    b.Property<long>("VkUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContestBaseId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Domain.Contest.CommentSurvival.CommentSurvival", b =>
                {
                    b.HasBaseType("Domain.Contest.ContestBase");

                    b.Property<Guid?>("WinnerParticipantId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("CommentSurvival");
                });

            modelBuilder.Entity("Domain.Contest.SeaBattle.SeaBattle", b =>
                {
                    b.HasBaseType("Domain.Contest.ContestBase");

                    b.HasDiscriminator().HasValue("SeaBattle");
                });

            modelBuilder.Entity("Domain.Participant", b =>
                {
                    b.HasOne("Domain.Contest.ContestBase", null)
                        .WithMany("Participants")
                        .HasForeignKey("ContestBaseId");
                });

            modelBuilder.Entity("Domain.Contest.ContestBase", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
